{"version":3,"sources":["cryptomonedas.png","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","setState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomoneda","CoinInfo","Id","Name","FullName","MensajeError","p","Error","mensaje","Boton","input","Formulario","setMoneda","setCriptomoneda","listaCriptomonedas","setListaCriptomonedas","error","setError","moneda","SelectMonedas","criptomoneda","SelectCriptomoneda","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","setResultado","cargando","setCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.103a4461.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, { Fragment, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Label = styled.label`\r\n  font-family: \"Bebas Neue\", cursive;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  -webkit-appearance: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n  // State del custom hook\r\n  const [state, setState] = useState(stateInicial);\r\n\r\n  const Seleccionar = () => {\r\n    return (\r\n      <Fragment>\r\n        <Label>{label}</Label>\r\n        <Select onChange={(e) => setState(e.target.value)} value={state}>\r\n          <option value=\"\">-- Seleccione --</option>\r\n          {opciones.map((opcion) => (\r\n            <option key={opcion.codigo} value={opcion.codigo}>\r\n              {opcion.nombre}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  //Se retorna State, interfaz y funcion que modifica el state\r\n  return [state, Seleccionar, setState];\r\n};\r\n\r\nexport default useMoneda;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Label = styled.label`\r\n  font-family: \"Bebas Neue\", cursive;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  -webkit-appearance: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n  // State del custom hook\r\n  const [state, setState] = useState(stateInicial);\r\n\r\n  const SelectCriptomoneda = () => {\r\n    return (\r\n      <Fragment>\r\n        <Label>{label}</Label>\r\n        <Select onChange={(e) => setState(e.target.value)} value={state}>\r\n          <option value=\"\">-- Seleccione --</option>\r\n          {opciones.map((opcion) => (\r\n            <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>\r\n              {opcion.CoinInfo.FullName}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  //Se retorna State, interfaz y funcion que modifica el state\r\n  return [state, SelectCriptomoneda, setState];\r\n};\r\n\r\nexport default useCriptomoneda;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #FFF;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <MensajeError>{mensaje}</MensajeError>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport useMoneda from \"../hooks/useMoneda\";\r\nimport useCriptomoneda from \"../hooks/useCriptomoneda\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\n\r\nconst Boton = styled.input`\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2fe;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  transition: background-color 0.3s ease;\r\n  &:hover {\r\n    background-color: #326ac0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Formulario = ({ setMoneda, setCriptomoneda }) => {\r\n  // State listado criptomonedas\r\n  const [listaCriptomonedas, setListaCriptomonedas] = useState([]);\r\n  // State para validar errores\r\n  const [error, setError] = useState(false);\r\n\r\n  const MONEDA = [\r\n    { codigo: \"COP\", nombre: \"Peso Colombiano\" },\r\n    { codigo: \"USD\", nombre: \"Dolar Estadounidense\" },\r\n    { codigo: \"EUR\", nombre: \"Euro\" },\r\n    { codigo: \"MXN\", nombre: \"Peso Mexicano\" },\r\n  ];\r\n  // usar hook useMoneda\r\n  const [moneda, SelectMonedas] = useMoneda(\"Elige tú moneda\", \"\", MONEDA);\r\n  // usar hook useCriptomoneda\r\n  const [criptomoneda, SelectCriptomoneda] = useCriptomoneda(\r\n    \"Elige tú criptomoneda\",\r\n    \"\",\r\n    listaCriptomonedas\r\n  );\r\n\r\n  //Ejecutar llamado a la api\r\n  useEffect(() => {\r\n    const consultarAPI = async () => {\r\n      const url =\r\n        \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\";\r\n      const resultado = await axios.get(url);\r\n      setListaCriptomonedas(resultado.data.Data);\r\n    };\r\n    consultarAPI();\r\n  }, []);\r\n\r\n  const cotizarMoneda = (e) => {\r\n    e.preventDefault();\r\n\r\n    if ((moneda === \"\") | (criptomoneda === \"\")) {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n\r\n    setMoneda(moneda);\r\n    setCriptomoneda(criptomoneda);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={cotizarMoneda}>\r\n      {error ? <Error mensaje={\"Todos los campos son obligatorios\"} /> : null}\r\n      <SelectMonedas />\r\n      <SelectCriptomoneda />\r\n      <Boton type=\"submit\" value=\"calcular\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst ResultadoDiv = styled.div`\r\n  color: #fff;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n  font-size: 18px;\r\n  span {\r\n    font-weight: bold;\r\n  }\r\n`;\r\nconst Precio = styled.p`\r\n  font-size: 30px;\r\n  span {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Cotizacion = ({ resultado }) => {\r\n  if (Object.keys(resultado).length === 0) return null;\r\n  return (\r\n    <ResultadoDiv>\r\n      <Precio>\r\n        El precio es: <span>{resultado.PRICE}</span>{\" \"}\r\n      </Precio>\r\n      <Info>\r\n        Precio más alto del día: <span>{resultado.HIGHDAY}</span>{\" \"}\r\n      </Info>\r\n      <Info>\r\n        Precio más bajo del día: <span>{resultado.LOWDAY}</span>{\" \"}\r\n      </Info>\r\n      <Info>\r\n        Variación últimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span>{\" \"}\r\n      </Info>\r\n      <Info>\r\n        Última Actualización: <span>{resultado.LASTUPDATE}</span>{\" \"}\r\n      </Info>\r\n    </ResultadoDiv>\r\n  );\r\n};\r\n\r\nexport default Cotizacion;\r\n","import React from \"react\";\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div class=\"sk-folding-cube\">\r\n      <div class=\"sk-cube1 sk-cube\"></div>\r\n      <div class=\"sk-cube2 sk-cube\"></div>\r\n      <div class=\"sk-cube4 sk-cube\"></div>\r\n      <div class=\"sk-cube3 sk-cube\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport imagen from \"./cryptomonedas.png\";\nimport Formulario from \"./components/Formulario\";\nimport axios from \"axios\";\nimport Cotizacion from \"./components/Cotizacion\";\nimport Spinner from \"./components/Spinner\";\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [moneda, setMoneda] = useState(\"\");\n  const [criptomoneda, setCriptomoneda] = useState(\"\");\n  const [resultado, setResultado] = useState({});\n  const [cargando, setCargando] = useState(false);\n\n  useEffect(() => {\n    // Se evita la ejecucion por primera vez\n    if (moneda === \"\") return;\n\n    const cotizarCriptomoneda = async () => {\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n      const resultado = await axios.get(url);\n      setCargando(true);\n      setTimeout(() => {\n        setCargando(false);\n        setResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 3000);\n    };\n    cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  const componente = cargando ? (\n    <Spinner />\n  ) : (\n    <Cotizacion resultado={resultado} />\n  );\n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt=\"Imagen criptomonedas\" />\n      </div>\n      <div>\n        <Heading>Cotiza Criptomonedas al instante</Heading>\n        <Formulario setMoneda={setMoneda} setCriptomoneda={setCriptomoneda} />\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}